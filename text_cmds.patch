diff -Naur text_cmds-99/cat/cat.c text_cmds/cat/cat.c
--- text_cmds-99/cat/cat.c	2005-09-20 23:36:44.000000000 +0200
+++ text_cmds/cat/cat.c	2017-12-07 22:15:11.000000000 +0100
@@ -63,9 +63,10 @@
 #include <string.h>
 #include <unistd.h>
 #include <stddef.h>
+#include "ios_error.h"
 
-int bflag, eflag, nflag, sflag, tflag, vflag;
-int rval;
+static int bflag, eflag, nflag, sflag, tflag, vflag;
+static int rval;
 const char *filename;
 
 static void usage(void);
@@ -78,11 +79,14 @@
 #endif
 
 int
-main(int argc, char *argv[])
+cat_main(int argc, char *argv[])
 {
 	int ch;
 
 	setlocale(LC_CTYPE, "");
+    // Initialize all flags
+    bflag = eflag = nflag = sflag = tflag = vflag = 0; rval = 0;
+    optind = 1; opterr = 1; optreset = 1;
 
 	while ((ch = getopt(argc, argv, "benstuv")) != -1)
 		switch (ch) {
@@ -116,8 +120,8 @@
 		scanfiles(argv, 1);
 	else
 		scanfiles(argv, 0);
-	if (fclose(stdout))
-		err(1, "stdout");
+	// if (fclose(stdout)) err(1, "stdout");
+    optarg = NULL; opterr = 0; optind = 0;
 	exit(rval);
 	/* NOTREACHED */
 }
@@ -243,22 +247,30 @@
 	static char *buf = NULL;
 	struct stat sbuf;
 
-	wfd = fileno(stdout);
+	// wfd = fileno(stdout);
 	if (buf == NULL) {
-		if (fstat(wfd, &sbuf))
-			err(1, "%s", filename);
+		// if (fstat(wfd, &sbuf))
+			// err(1, "%s", filename);
 		bsize = MAX(sbuf.st_blksize, 1024);
 		if ((buf = malloc(bsize)) == NULL)
 			err(1, "buffer");
 	}
 	while ((nr = read(rfd, buf, bsize)) > 0)
-		for (off = 0; nr; nr -= nw, off += nw)
-			if ((nw = write(wfd, buf + off, (size_t)nr)) < 0)
-				err(1, "stdout");
+        for (off = 0; nr; nr -= nw, off += nw) {
+            // We can't write to the fd of stdout, so we write to stdout
+            nw = 0; // number of bytes written
+            for (int i = 0; i < nr; i++) {
+                fputc(*(buf+off+nw), stdout);
+                nw += 1;
+            }
+			// if ((nw = write(wfd, buf + off, (size_t)nr)) < 0) err(1, "stdout");
+        }
 	if (nr < 0) {
 		warn("%s", filename);
 		rval = 1;
 	}
+    free(buf);
+    buf = NULL;
 }
 
 #ifndef NO_UDOM_SUPPORT
diff -Naur text_cmds-99/grep/grep.c text_cmds/grep/grep.c
--- text_cmds-99/grep/grep.c	2015-08-18 22:29:43.000000000 +0200
+++ text_cmds/grep/grep.c	2017-12-07 22:15:46.000000000 +0100
@@ -53,6 +53,7 @@
 #include "fastmatch.h"
 #endif
 #include "grep.h"
+#include "ios_error.h"
 
 #ifndef WITHOUT_NLS
 #include <nl_types.h>
@@ -351,7 +352,7 @@
 }
 
 int
-main(int argc, char *argv[])
+grep_main(int argc, char *argv[])
 {
 	char **aargv, **eargv, *eopts;
 	char *ep;
@@ -360,8 +361,37 @@
 	unsigned int aargc, eargc, i;
 	int c, lastc, needpattern, newarg, prevoptind;
 
-	setlocale(LC_ALL, "");
-
+    setlocale(LC_ALL, "");
+    // Initialize all variables and flags:
+    optind = 1; opterr = 1; optreset = 1;
+    patterns = pattern_sz = 0;
+    fpatterns = fpattern_sz = 0;
+    dpatterns = dpattern_sz = 0;
+    
+    pattern = NULL;
+    dpattern = NULL;
+    fpattern = NULL;
+    
+    cflags = REG_NOSUB;
+    eflags = REG_STARTEND;
+    
+    matchall = false;
+    
+    Aflag = Bflag = 0;
+    Hflag = Lflag = bflag = cflag = hflag = iflag = lflag = mflag = false;
+    mcount = 0;
+    nflag = oflag = qflag = sflag = vflag = wflag = xflag = lbflag = nullflag = false;
+    label = NULL;
+    grepbehave = GREP_BASIC;
+    binbehave = BINFILE_BIN;
+    filebehave = FILE_STDIO;
+    devbehave = DEV_READ;
+    dirbehave = DIR_READ;
+    linkbehave = LINK_READ;
+    
+    dexclude = dinclude = false;
+    fexclude = finclude = false;
+    
 #ifndef WITHOUT_NLS
 	catalog = catopen("grep", NL_CAT_LOCALE);
 #endif
diff -Naur text_cmds-99/grep/util.c text_cmds/grep/util.c
--- text_cmds-99/grep/util.c	2015-09-10 22:25:31.000000000 +0200
+++ text_cmds/grep/util.c	2017-12-06 13:09:58.000000000 +0100
@@ -59,6 +59,7 @@
 #include "fastmatch.h"
 #endif
 #include "grep.h"
+#include "ios_error.h"
 
 static int	 linesqueued;
 static int	 procline(struct str *l, int);
diff -Naur text_cmds-99/wc/wc.c text_cmds/wc/wc.c
--- text_cmds-99/wc/wc.c	2008-02-26 02:39:32.000000000 +0100
+++ text_cmds/wc/wc.c	2017-12-08 15:34:56.000000000 +0100
@@ -62,24 +62,29 @@
 #include <unistd.h>
 #include <wchar.h>
 #include <wctype.h>
+#include "ios_error.h"
 
 /* We allocte this much memory statically, and use it as a fallback for
   malloc failure, or statfs failure.  So it should be small, but not
   "too small" */
 #define SMALL_BUF_SIZE (1024 * 8)
 
-uintmax_t tlinect, twordct, tcharct;
-int doline, doword, dochar, domulti;
+static uintmax_t tlinect, twordct, tcharct;
+static int doline, doword, dochar, domulti;
 
 static int	cnt(const char *);
 static void	usage(void);
 
 int
-main(int argc, char *argv[])
+wc_main(int argc, char *argv[])
 {
 	int ch, errors, total;
 
 	(void) setlocale(LC_CTYPE, "");
+    // Initialize flags:
+    doline = doword = dochar =  domulti = 0;
+    tlinect = twordct = tcharct = 0;
+    optind = 1; opterr = 1; optreset = 1;
 
 	while ((ch = getopt(argc, argv, "clmw")) != -1)
 		switch((char)ch) {
@@ -133,6 +138,7 @@
 			(void)printf(" %7ju", tcharct);
 		(void)printf(" total\n");
 	}
+    optarg = NULL; opterr = 0; optind = 0;
 	exit(errors == 0 ? 0 : 1);
 }
 
